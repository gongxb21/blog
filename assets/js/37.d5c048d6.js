(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{238:function(e,t,r){"use strict";r.r(t);var a={props:["slot-key"],mounted:function(){this.$nextTick(function(){this.$vuepress.$emit("AsyncMarkdownContentMounted",this.slotKey)})}},n=r(5),s=Object(n.a)(a,function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.slotKey}},[r("h1",{attrs:{id:"引用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#引用","aria-hidden":"true"}},[e._v("#")]),e._v(" "),r("a",{attrs:{href:"https://blog.csdn.net/gxb2260/article/details/78289047",target:"_blank",rel:"noopener noreferrer"}},[e._v("引用"),r("OutboundLink")],1)]),e._v(" "),r("p",[e._v("在 JDK1.2 以前，对引用的定义太过狭隘，一个对象只有被引用或者没有被引用两种状态。")]),e._v(" "),r("p",[e._v("在 JDK1.2 之后，Java 对引用的概念进行了扩充，把引用分为了"),r("strong",[e._v("强引用（Strong Reference）")]),e._v("、"),r("strong",[e._v("软引用（Soft Reference）")]),e._v("、"),r("strong",[e._v("弱引用（Weak Reference）和虚引用（Phantom Reference)")]),e._v(" 四种类型。这四种类型的强度依次变弱。")]),e._v(" "),r("h2",{attrs:{id:"强引用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#强引用","aria-hidden":"true"}},[e._v("#")]),e._v(" 强引用")]),e._v(" "),r("p",[e._v("在代码中普遍存在，比如直接实例化一个对象，只要强引用还存在，垃圾收集器永远不会回收被引用的对象。")]),e._v(" "),r("h2",{attrs:{id:"软引用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#软引用","aria-hidden":"true"}},[e._v("#")]),e._v(" 软引用")]),e._v(" "),r("p",[e._v("用来描述一些还有用但是并非必需的对象。在系统将要发生内存溢出异常之前，会将这些对象列入回收范围之中，进行第二次回收。如果这次回收还是没有足够的内存，才会抛出内存溢出异常。在 JDK1.2 之后，提供了 SoftReference 类，用来实现软引用。")]),e._v(" "),r("h2",{attrs:{id:"弱引用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#弱引用","aria-hidden":"true"}},[e._v("#")]),e._v(" 弱引用")]),e._v(" "),r("p",[e._v("也是用来描述非必需对象的，但是强度会比软引用更弱些，被弱引用关联的对象只能生存到下次垃圾收集发生之前。当系统进行垃圾收集的时候，无论当前内存是否足够，都会回收只被弱引用关联的对象。在 JDK1.2 之后，提供了 WeakReference 对象来实现弱引用。")]),e._v(" "),r("h2",{attrs:{id:"虚引用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#虚引用","aria-hidden":"true"}},[e._v("#")]),e._v(" 虚引用")]),e._v(" "),r("p",[e._v("也被称为幽灵引用或幻影引用，他是最弱的一种引用关系。一个对象是否有虚引用的存在，完全不会对其生存时间有影响，也无法通过虚引用来获得一个对象的实例。为一个对象设置虚引用关联的唯一目的就是能在这个对象被垃圾回收器回收之收到一个系统通知。在 JDK1.2 之后，提供了 PhantomRefenece 类来实现虚引用。")]),e._v(" "),r("hr")])},[],!1,null,null,null);s.options.__file="引用.md";t.default=s.exports}}]);