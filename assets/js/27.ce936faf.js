(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{234:function(a,t,s){"use strict";s.r(t);var e={props:["slot-key"],mounted:function(){this.$nextTick(function(){this.$vuepress.$emit("AsyncMarkdownContentMounted",this.slotKey)})}},r=s(5),n=Object(r.a)(e,function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.slotKey}},[s("h1",{attrs:{id:"数据库事务和隔离级别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据库事务和隔离级别","aria-hidden":"true"}},[a._v("#")]),a._v(" 数据库事务和隔离级别")]),a._v(" "),s("p",[a._v("如果一个数据库声称支持事务的操作，那么该数据库必须要具备以下四个特性（ACID）：")]),a._v(" "),s("h2",{attrs:{id:"事务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#事务","aria-hidden":"true"}},[a._v("#")]),a._v(" 事务")]),a._v(" "),s("h3",{attrs:{id:"原子性（atomicity）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原子性（atomicity）","aria-hidden":"true"}},[a._v("#")]),a._v(" 原子性（Atomicity）")]),a._v(" "),s("blockquote",[s("p",[a._v("原子性是指事务包含的所有操作要么全部成功，要么全部失败回滚，因此事务的操作如果成功就必须要完全应用到数据库，如果操作失败则不能对数据库有任何影响。")])]),a._v(" "),s("h3",{attrs:{id:"一致性（consistency）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一致性（consistency）","aria-hidden":"true"}},[a._v("#")]),a._v(" 一致性（Consistency）")]),a._v(" "),s("blockquote",[s("p",[a._v("一致性是指事务必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事务执行之前和执行之后都必须处于一致性状态。")])]),a._v(" "),s("p",[a._v("拿银行转账来说，假设用户 A 和用户 B 两者的钱加起来一共是 1000，那么不管 A 和 B 之间如何转账，转几次账，事务结束后两个用户的钱相加起来应该还得是 1000，这就是事务的一致性。")]),a._v(" "),s("h3",{attrs:{id:"隔离性（isolation）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#隔离性（isolation）","aria-hidden":"true"}},[a._v("#")]),a._v(" 隔离性（Isolation）")]),a._v(" "),s("blockquote",[s("p",[a._v("隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。")])]),a._v(" "),s("p",[a._v("即要达到这么一种效果：对于任意两个并发的事务 T1 和 T2，在事务 T1 看来，T2 要么在 T1 开始之前就已经结束，要么在 T1 结束之后才开始，这样每个事务都感觉不到有其他事务在并发地执行。")]),a._v(" "),s("h3",{attrs:{id:"持久性（durability）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#持久性（durability）","aria-hidden":"true"}},[a._v("#")]),a._v(" 持久性（Durability）")]),a._v(" "),s("blockquote",[s("p",[a._v("持久性是指一个事务一旦被提交了，那么对数据库中的数据的改变就是永久性的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。")])]),a._v(" "),s("p",[a._v("例如我们在使用 JDBC 操作数据库时，在提交事务方法后，提示用户事务操作完成，当我们程序执行完成直到看到提示后，就可以认定事务以及正确提交，即使这时候数据库出现了问题，也必须要将我们的事务完全执行完成，否则就会造成我们看到提示事务处理完毕，但是数据库因为故障而没有执行事务的重大错误。")]),a._v(" "),s("h2",{attrs:{id:"数据库隔离级别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据库隔离级别","aria-hidden":"true"}},[a._v("#")]),a._v(" 数据库隔离级别")]),a._v(" "),s("h3",{attrs:{id:"事务的问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#事务的问题","aria-hidden":"true"}},[a._v("#")]),a._v(" 事务的问题")]),a._v(" "),s("h4",{attrs:{id:"脏读"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#脏读","aria-hidden":"true"}},[a._v("#")]),a._v(" 脏读")]),a._v(" "),s("blockquote",[s("p",[a._v("脏读是指 \b 一个事务读取了另一个事务未提交的事务。")])]),a._v(" "),s("p",[a._v("例如：用户 A 向用户 B 转账 100 元，对应 SQL 命令如下")]),a._v(" "),s("div",{staticClass:"language-sql line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("update")]),a._v(" account "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("set")]),a._v(" money"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("money"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("100")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("where")]),a._v(" name"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("’B’"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("此时A通知B"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("update")]),a._v(" account "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("set")]),a._v(" money"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("money "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("100")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("where")]),a._v(" name"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("’A’"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br")])]),s("p",[a._v("当只执行第一条 SQL 时，A 通知 B 查看账户，B 发现确实钱已到账,这个时候脏读已经发生，而之后无论第二条 SQL 是否执行，只要该事务不提交，则所有操作都将回滚，那么当 B 以后再次查看账户时就会发现钱其实并没有转。")]),a._v(" "),s("h4",{attrs:{id:"不可重复读"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#不可重复读","aria-hidden":"true"}},[a._v("#")]),a._v(" 不可重复读")]),a._v(" "),s("blockquote",[s("p",[a._v("不可重复读是指在对于数据库中的某个数据，一个事务范围内多次查询却返回了不同的数据值，这是由于在查询间隔，被另一个事务修改并提交了。")])]),a._v(" "),s("p",[a._v("例如事务 T1 在读取某一数据，而事务 T2 在 T1 事务开启之后，立马修改了这个数据并且提交，事务 T1 再次读取该数据就得到了不同的结果，发送了不可重复读。")]),a._v(" "),s("p",[s("em",[a._v("不可重复读和脏读的区别是，脏读是某一事务读取了另一个事务未提交的脏数据，而不可重复读则是读取了前一事务提交的数据")]),a._v("。")]),a._v(" "),s("h4",{attrs:{id:"幻读"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#幻读","aria-hidden":"true"}},[a._v("#")]),a._v(" 幻读")]),a._v(" "),s("blockquote",[s("p",[a._v("幻读是事务非独立执行时发生的一种现象。")])]),a._v(" "),s("p",[a._v("例如事务 T1 \b 删除了表中的所有数据，这时事务 T2 又对这个表中插入了一行数据项，并且提交给数据库。而操作事务 T1 的用户如果再查看删除后的数据，会发现还有一行没有删除，其实这行是从事务 T2 中添加的，就好像产生幻觉一样，这就是发生了幻读。")]),a._v(" "),s("p",[s("em",[a._v("幻读和不可重复读都是读取了另一条已经提交的事务（这点就脏读不同），所不同的是不可重复读查询的都是同一个数据项，而幻读针对的是一批数据整体（比如数据的个数）")]),a._v("。")]),a._v(" "),s("h3",{attrs:{id:"数据库隔离级别-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据库隔离级别-2","aria-hidden":"true"}},[a._v("#")]),a._v(" 数据库隔离级别")]),a._v(" "),s("p",[a._v("现在来看看 MySQL 数据库为我们提供的四种隔离级别，从安全级别由高到底排列：")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("Serializable (串行化)：可避免脏读、不可重复读、幻读的发生。")])]),a._v(" "),s("li",[s("p",[a._v("Repeatable read (可重复读)：可避免脏读、不可重复读的发生。")])]),a._v(" "),s("li",[s("p",[a._v("Read committed (读已提交)：可避免脏读的发生。")])]),a._v(" "),s("li",[s("p",[a._v("Read uncommitted (读未提交)：最低级别，任何情况都无法保证。")])])]),a._v(" "),s("p",[a._v("当然级别越高，执行效率就越低。像 Serializable 这样的级别，就是以锁表的方式(类似于 Java 多线程中的锁)使得其他的线程只能在锁外等待，所以平时选用何种隔离级别应该根据实际情况。在 MySQL 数据库中默认的隔离级别为 Repeatable read (可重复读)。")]),a._v(" "),s("h3",{attrs:{id:"修改隔离级别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#修改隔离级别","aria-hidden":"true"}},[a._v("#")]),a._v(" 修改隔离级别")]),a._v(" "),s("div",{staticClass:"language-sql line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[a._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 通过sql 查看隔离级别")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("show")]),a._v(" VARIABLES  "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("like")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'%tx_isolation%'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// \b把隔离级别修改为串行化")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("set")]),a._v(" tx_isolation"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'Serializable'")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br")])])])},[],!1,null,null,null);n.options.__file="transaction.md";t.default=n.exports}}]);