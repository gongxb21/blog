(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{221:function(t,a,s){"use strict";s.r(a);var e={props:["slot-key"],mounted:function(){this.$nextTick(function(){this.$vuepress.$emit("AsyncMarkdownContentMounted",this.slotKey)})}},n=s(5),r=Object(n.a)(e,function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.slotKey}},[s("h1",{attrs:{id:"mysql-全局-id-设计"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mysql-全局-id-设计","aria-hidden":"true"}},[t._v("#")]),t._v(" Mysql 全局 ID 设计")]),t._v(" "),s("p",[t._v("当数据库采用了分库或者分表之后，之前的自增主键就不能在用了，如何简单高效的解决唯一性问题又成了一个问题？")]),t._v(" "),s("h2",{attrs:{id:"uuid"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#uuid","aria-hidden":"true"}},[t._v("#")]),t._v(" UUID")]),t._v(" "),s("p",[t._v("这种方式真的是简单粗暴，直接获取 32 位的 UUID，根本就不会出现重复的情况，但是问题在于，\b 唯一性是保证了，但是主键是默认会建立索引的，乱序的 UUID 又会导致查询的效率不理想。")]),t._v(" "),s("h3",{attrs:{id:"优点："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#优点：","aria-hidden":"true"}},[t._v("#")]),t._v(" 优点：")]),t._v(" "),s("ul",[s("li",[t._v("简单，代码方便。")]),t._v(" "),s("li",[t._v("全球唯一，在遇见数据迁移，系统数据合并，或者数据库变更等情况下，可以从容应对。")])]),t._v(" "),s("h3",{attrs:{id:"缺点："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#缺点：","aria-hidden":"true"}},[t._v("#")]),t._v(" 缺点：")]),t._v(" "),s("ul",[s("li",[t._v("没有排序，无法保证趋势递增。")]),t._v(" "),s("li",[t._v("UUID 往往是使用字符串存储，查询的效率比较低。")]),t._v(" "),s("li",[t._v("不可读。")])]),t._v(" "),s("h2",{attrs:{id:"数据库自增-id"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据库自增-id","aria-hidden":"true"}},[t._v("#")]),t._v(" 数据库自增 ID")]),t._v(" "),s("p",[t._v("采用了 MySQL 自增长 ID 的机制（auto_increment + replace into + MyISAM）。一个生成 64 位 ID 方案具体就是这样的： \b 先创建一个单独的 \b 表")]),t._v(" "),s("div",{staticClass:"language-sql line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" my_uid "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n            id "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bigint")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto_increment")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            stub "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PRIMARY")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UNIQUE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),t._v(" uid "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stub"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ENGINE")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("MyISAM"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("p",[t._v("如何获取唯一的自增 ID 呢？")]),t._v(" "),s("div",{staticClass:"language-sql line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("REPLACE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INTO")]),t._v(" my_uid "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stub"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VALUES")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" LAST_INSERT_ID"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("ul",[s("li",[t._v("replace"),s("sup",[t._v("1")]),t._v(" 的用法 请看参考")])]),t._v(" "),s("p",[t._v("其实这个表还是集群部署的，只需要设置那么的主键自增的步长和起始值不一样，比如 A 服务器从 1 开始，步长为 2；B 服务器从 2 开始，步长也为 2。")]),t._v(" "),s("p",[t._v("关于这个 last_insert_id() ,有几点是需要注意的：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("AUTO_INCREMENT 值的。这个值不能被其它 Connection 对象的影响，即它们产生它们自己的 AUTO_INCREMENT 值。")])]),t._v(" "),s("li",[s("p",[t._v("LAST_INSERT_ID 是与 table 无关的，如果向表 a 插入数据后，再向表 b 插入数据，LAST_INSERT_ID 返回表 b 中的 Id 值。")])]),t._v(" "),s("li",[s("p",[t._v("假如你使用一条 INSERT 语句插入多个行， LAST_INSERT_ID() 只返回插入的第一行数据时产生的值。其原因是这使依靠其它服务器复制同样的 INSERT 语句变得简单")])])]),t._v(" "),s("h3",{attrs:{id:"优点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#优点","aria-hidden":"true"}},[t._v("#")]),t._v(" 优点")]),t._v(" "),s("ul",[s("li",[t._v("充分借助数据库的自增 ID 机制，提供高可靠性，生成的 ID 有序。")])]),t._v(" "),s("h3",{attrs:{id:"缺点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#缺点","aria-hidden":"true"}},[t._v("#")]),t._v(" 缺点")]),t._v(" "),s("ul",[s("li",[t._v("占用两个独立的 MySQL 实例，有些浪费资源，成本较高。")])]),t._v(" "),s("h2",{attrs:{id:"snowflake"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#snowflake","aria-hidden":"true"}},[t._v("#")]),t._v(" Snowflake")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/twitter/snowflake",target:"_blank",rel:"noopener noreferrer"}},[t._v("Snowflake"),s("OutboundLink")],1),t._v(" twitter 的业务需求。snowflake 系统生成 64 位的 ID。由 3 部分组成：")]),t._v(" "),s("ul",[s("li",[t._v("41 位的时间序列（精确到毫秒，41 位的长度可以使用 69 年）")]),t._v(" "),s("li",[t._v("10 位的机器标识（10 位的长度最多支持部署 1024 个节点）")]),t._v(" "),s("li",[t._v("12 位的计数顺序号（12 位的计数顺序号支持每个节点每毫秒产生 4096 个 ID 序号）")]),t._v(" "),s("li",[t._v("最高位是符号位，始终为 0。")])]),t._v(" "),s("p",[t._v("snowflake 算法可以根据自身项目的需要进行一定的修改。比如估算未来的数据中心个数，每个数据中心的机器数以及统一毫秒可以能的并发数来调整在算法中所需要的 bit 数。")]),t._v(" "),s("h3",{attrs:{id:"优点：-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#优点：-2","aria-hidden":"true"}},[t._v("#")]),t._v(" 优点：")]),t._v(" "),s("ul",[s("li",[t._v("不依赖于数据库，灵活方便，且性能优于数据库。")]),t._v(" "),s("li",[t._v("ID 按照时间在单机上是递增的。")])]),t._v(" "),s("h3",{attrs:{id:"缺点：-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#缺点：-2","aria-hidden":"true"}},[t._v("#")]),t._v(" 缺点：")]),t._v(" "),s("ul",[s("li",[t._v("在单机上是递增的，但是由于涉及到分布式环境，每台机器上的时钟不可能完全同步，也许有时候也会出现不是全局递增的情况。")])]),t._v(" "),s("h2",{attrs:{id:"参考"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考","aria-hidden":"true"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://tech.meituan.com/MT_Leaf.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("美团 LEAF"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://www.cnblogs.com/qiumingcheng/p/5409491.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("邱明成的 csdn"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://www.jianshu.com/p/a0a3aa888a49",target:"_blank",rel:"noopener noreferrer"}},[t._v("简书"),s("OutboundLink")],1)])])])},[],!1,null,null,null);r.options.__file="分布式ID.md";a.default=r.exports}}]);