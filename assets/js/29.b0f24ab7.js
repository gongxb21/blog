(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{237:function(e,r,t){"use strict";t.r(r);var o={props:["slot-key"],mounted:function(){this.$nextTick(function(){this.$vuepress.$emit("AsyncMarkdownContentMounted",this.slotKey)})}},i=t(5),v=Object(i.a)(o,function(){var e=this,r=e.$createElement,t=e._self._c||r;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.slotKey}},[t("h1",{attrs:{id:"docker-常用命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-常用命令","aria-hidden":"true"}},[e._v("#")]),e._v(" Docker 常用命令")]),e._v(" "),t("h2",{attrs:{id:"常用命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常用命令","aria-hidden":"true"}},[e._v("#")]),e._v(" \b 常用命令")]),e._v(" "),t("ul",[t("li",[e._v("docker version")]),e._v(" "),t("li",[e._v("docker info")]),e._v(" "),t("li",[e._v("sudo groupadd docker 创建 docker 用户组")]),e._v(" "),t("li",[e._v("sudo usermod -aG docker $user 把用户添加到用户组")]),e._v(" "),t("li",[e._v("sudo service docker start service 命令启动")]),e._v(" "),t("li",[e._v("sudo systemctl start docker systemctl 命令启动")]),e._v(" "),t("li",[e._v("$ docker image ls # 列出本机的所有 image 文件。")]),e._v(" "),t("li",[e._v("$ docker image rm [imageName] # 删除 image 文件")])]),e._v(" "),t("h2",{attrs:{id:"镜像、容器、仓库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#镜像、容器、仓库","aria-hidden":"true"}},[e._v("#")]),e._v(" 镜像、容器、仓库")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("docker search \b 搜 \b 索镜像，\b 默认是在 dockerHub 中")])]),e._v(" "),t("li",[t("p",[e._v("docker pull 拉取 \b 镜像")])]),e._v(" "),t("li",[t("p",[e._v("docker start webserver 开始运行某个镜像")])]),e._v(" "),t("li",[t("p",[e._v("docker stop websever 结束某个镜像")])]),e._v(" "),t("li",[t("p",[e._v("docker ps 查看 docker 进程")])]),e._v(" "),t("li",[t("p",[e._v("docker image ls docker 镜像显示\n由于 Docker 使用 Union FS，相同的层只需要保存一份即可,因此实际镜像硬盘占用空间很可能要比这个列表镜像大小的总和要小的多。")])]),e._v(" "),t("li",[t("p",[e._v("docker system df docker 内存使用")])]),e._v(" "),t("li",[t("p",[e._v("docker image ls -f dangling=true")])]),e._v(" "),t("li",[t("p",[e._v("docker commit [选项] <容器 ID 或容器名> [<仓库名>[:<标签>]] 发布镜像")])]),e._v(" "),t("li",[t("p",[e._v("docker container stop container_id 停止某个服务")])]),e._v(" "),t("li",[t("p",[e._v("docker container logs container_id 查看镜像日志")])]),e._v(" "),t("li",[t("p",[e._v("docker container restart container_name \b 重启服务")])]),e._v(" "),t("li",[t("p",[e._v("docker container stop container_name 停止服务")])]),e._v(" "),t("li",[t("p",[e._v("docker container start container_name 开始服务")])]),e._v(" "),t("li",[t("p",[e._v("docker container rm container_name")])]),e._v(" "),t("li",[t("p",[e._v("docker container prune 清理所有处于终止状态的容器（"),t("strong",[e._v("慎用")]),e._v("）")])]),e._v(" "),t("li",[t("p",[e._v("docker attach")])]),e._v(" "),t("li",[t("p",[e._v("docker run -dit ubuntu")])]),e._v(" "),t("li",[t("p",[e._v("docker exec -i container_id bash")])]),e._v(" "),t("li",[t("p",[e._v("docker export 7691a814370e > ubuntu.tar")])]),e._v(" "),t("li",[t("p",[e._v("docker tag ubuntu:latest 127.0.0.1:5000/ubuntu:latest")])]),e._v(" "),t("li",[t("p",[e._v("docker push 127.0.0.1:5000/ubuntu:latest")])]),e._v(" "),t("li",[t("p",[e._v("docker volume create my-vol 创建数据卷")])]),e._v(" "),t("li",[t("p",[e._v("docker volume ls")])]),e._v(" "),t("li",[t("p",[e._v("docker volume inspect my-vol")])]),e._v(" "),t("li"),e._v(" "),t("li",[t("p",[e._v("数据卷   是一个可供一个或多个容器使用的特殊目录，它绕过 UFS，可以提供很多有用的特性：\n数据卷：可以在容器之间共享和重用，对数据卷的修改会立马生效，对数据卷的更新，不会影响镜像，数据卷默认会一直存在，即使容器被删除。")])])]),e._v(" "),t("p",[e._v("外部访问容器")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("-p 可以指定要映射的端口，并且，在一个指定端口上只可以绑定一个容器")])]),e._v(" "),t("li",[t("p",[e._v("-P 它会随机映射一个端口至容器内部开放的网络端口(范围不详，似乎都上万)")])]),e._v(" "),t("li",[t("p",[e._v("docker network create -d bridge my-net docker 网络")])]),e._v(" "),t("li",[t("p",[e._v("docker run -it --rm --name busybox1 --network my-net busybox sh")])]),e._v(" "),t("li",[t("p",[e._v("服务 (service)：一个应用容器，实际上可以运行多个相同镜像的实例。")])]),e._v(" "),t("li",[t("p",[e._v("项目 (project)：由一组关联的应用容器组成的一个完整业务单元")])])])])},[],!1,null,null,null);v.options.__file="docker_command.md";r.default=v.exports}}]);