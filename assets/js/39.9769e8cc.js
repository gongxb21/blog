(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{232:function(a,e,r){"use strict";r.r(e);var v={props:["slot-key"],mounted:function(){this.$nextTick(function(){this.$vuepress.$emit("AsyncMarkdownContentMounted",this.slotKey)})}},t=r(5),l=Object(t.a)(v,function(){var a=this,e=a.$createElement,r=a._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":a.slotKey}},[r("h1",{attrs:{id:"垃圾收集器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#垃圾收集器","aria-hidden":"true"}},[a._v("#")]),a._v(" 垃圾收集器")]),a._v(" "),r("p",[a._v("如果说收集算法是内存回收的方法论，垃圾收集器就是内存回收的具体实现")]),a._v(" "),r("h2",{attrs:{id:"serial收集器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#serial收集器","aria-hidden":"true"}},[a._v("#")]),a._v(" Serial收集器")]),a._v(" "),r("p",[a._v("串行收集器是最古老，最稳定以及效率高的收集器，可能会产生较长的停顿，只使用一个线程去回收。新生代、老年代使用串行回收；新生代复制算法、老年代标记-压缩；垃圾收集的过程中会Stop The World（服务暂停）")]),a._v(" "),r("p",[a._v("参数控制：-XX:+UseSerialGC  串行收集器")]),a._v(" "),r("h2",{attrs:{id:"parnew收集器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#parnew收集器","aria-hidden":"true"}},[a._v("#")]),a._v(" ParNew收集器")]),a._v(" "),r("p",[a._v("ParNew收集器其实就是Serial收集器的多线程版本。新生代并行，老年代串行；新生代复制算法、老年代标记-压缩")]),a._v(" "),r("p",[a._v("参数控制：-XX:+UseParNewGC  ParNew收集器")]),a._v(" "),r("p",[a._v("-XX:ParallelGCThreads 限制线程数量")]),a._v(" "),r("h2",{attrs:{id:"parallel收集器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#parallel收集器","aria-hidden":"true"}},[a._v("#")]),a._v(" Parallel收集器")]),a._v(" "),r("p",[a._v("Parallel Scavenge收集器类似ParNew收集器，Parallel收集器更关注系统的吞吐量。可以通过参数来打开自适应调节策略，虚拟机会根据当前系统的运行情况收集性能监控信息，动态调整这些参数以提供最合适的停顿时间或最大的吞吐量；也可以通过参数控制GC的时间不大于多少毫秒或者比例；新生代复制算法、老年代标记-压缩")]),a._v(" "),r("p",[a._v("参数控制：-XX:+UseParallelGC  使用Parallel收集器+ 老年代串行")]),a._v(" "),r("h2",{attrs:{id:"parallel-old-收集器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#parallel-old-收集器","aria-hidden":"true"}},[a._v("#")]),a._v(" Parallel Old 收集器")]),a._v(" "),r("p",[a._v("Parallel Old是Parallel Scavenge收集器的老年代版本，使用多线程和“标记－整理”算法。这个收集器是在JDK 1.6中才开始提供")]),a._v(" "),r("p",[a._v("参数控制： -XX:+UseParallelOldGC 使用Parallel收集器+ 老年代并行")]),a._v(" "),r("h2",{attrs:{id:"cms收集器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#cms收集器","aria-hidden":"true"}},[a._v("#")]),a._v(" CMS收集器")]),a._v(" "),r("p",[a._v("CMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器。目前很大一部分的Java应用都集中在互联网站或B/S系统的服务端上，这类应用尤其重视服务的响应速度，希望系统停顿时间最短，以给用户带来较好的体验。")]),a._v(" "),r("p",[a._v("从名字（包含“Mark Sweep”）上就可以看出CMS收集器是基于“标记-清除”算法实现的，它的运作过程相对于前面几种收集器来说要更复杂一些，整个过程分为4个步骤，包括：")]),a._v(" "),r("ul",[r("li",[r("p",[a._v("初始标记（CMS initial mark）")])]),a._v(" "),r("li",[r("p",[a._v("并发标记（CMS concurrent mark）")])]),a._v(" "),r("li",[r("p",[a._v("重新标记（CMS remark）")])]),a._v(" "),r("li",[r("p",[a._v("并发清除（CMS concurrent sweep）")])])]),a._v(" "),r("p",[a._v("其中初始标记、重新标记这两个步骤仍然需要“Stop The World”。初始标记仅仅只是标记一下GC Roots能直接关联到的对象，速度很快，并发标记阶段就是进行GC Roots Tracing的过程，而重新标记阶段则是为了修正并发标记期间，因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间一般会比初始标记阶段稍长一些，但远比并发标记的时间短。")]),a._v(" "),r("p",[a._v("由于整个过程中耗时最长的并发标记和并发清除过程中，收集器线程都可以与用户线程一起工作，所以总体上来说，CMS收集器的内存回收过程是与用户线程一起并发地执行。老年代收集器（新生代使用ParNew）")]),a._v(" "),r("ul",[r("li",[r("p",[a._v("优点:并发收集、低停顿")])]),a._v(" "),r("li",[r("p",[a._v("缺点：产生大量空间碎片、并发阶段会降低吞吐量")])]),a._v(" "),r("li",[r("p",[a._v("参数控制：-XX:+UseConcMarkSweepGC  使用CMS收集器")]),a._v(" "),r("pre",[r("code",[a._v("   -XX:+ UseCMSCompactAtFullCollection Full GC后，进行一次碎片整理；整理过程是独占的，会引起停顿时间变长\n\n   -XX:+CMSFullGCsBeforeCompaction  设置进行几次Full GC后，进行一次碎片整理\n\n   -XX:ParallelCMSThreads  设定CMS的线程数量（一般情况约等于可用CPU数量） \n")])])])]),a._v(" "),r("h2",{attrs:{id:"g1收集器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#g1收集器","aria-hidden":"true"}},[a._v("#")]),a._v(" G1收集器")]),a._v(" "),r("p",[a._v("G1是目前技术发展的最前沿成果之一，HotSpot开发团队赋予它的使命是未来可以替换掉JDK1.5中发布的CMS收集器。与CMS收集器相比G1收集器有以下特点：")]),a._v(" "),r("ul",[r("li",[r("p",[a._v("空间整合，G1收集器采用标记整理算法，不会产生内存空间碎片。分配大对象时不会因为无法找到连续空间而提前触发下一次GC。")])]),a._v(" "),r("li",[r("p",[a._v("可预测停顿，这是G1的另一大优势，降低停顿时间是G1和CMS的共同关注点，但G1除了追求低停顿外，还能建立可预测的停顿时间模型，能让使用者明确指定在一个长度为N毫秒的时间片段内，消耗在垃圾收集上的时间不得超过N毫秒，这几乎已经是实时Java（RTSJ）的垃圾收集器的特征了。")])])]),a._v(" "),r("p",[a._v("上面提到的垃圾收集器，收集的范围都是整个新生代或者老年代，而G1不再是这样。使用G1收集器时，Java堆的内存布局与其他收集器有很大差别，它将整个Java堆划分为多个大小相等的独立区域（Region），虽然还保留有新生代和老年代的概念，但新生代和老年代不再是物理隔阂了，它们都是一部分（可以不连续）Region的集合。")]),a._v(" "),r("p",[a._v("G1的新生代收集跟ParNew类似，当新生代占用达到一定比例的时候，开始出发收集。和CMS类似，G1收集器收集老年代对象会有短暂停顿。")]),a._v(" "),r("p",[a._v("收集步骤：")]),a._v(" "),r("ol",[r("li",[r("p",[a._v("标记阶段，首先初始标记(Initial-Mark),这个阶段是停顿的(Stop the World Event)，并且会触发一次普通Mintor GC。对应GC log:GC pause (young) (inital-mark)")])]),a._v(" "),r("li",[r("p",[a._v("Root Region Scanning，程序运行过程中会回收survivor区(存活到老年代)，这一过程必须在young GC之前完成。")])]),a._v(" "),r("li",[r("p",[a._v("Concurrent Marking，在整个堆中进行并发标记(和应用程序并发执行)，此过程可能被young GC中断。在并发标记阶段，若发现区域对象中的所有对象都是垃圾，那个这个区域会被立即回收(图中打X)。同时，并发标记过程中，会计算每个区域的对象活性(区域中存活对象的比例)。")])]),a._v(" "),r("li",[r("p",[a._v("Remark, 再标记，会有短暂停顿(STW)。再标记阶段是用来收集 并发标记阶段 产生新的垃圾(并发阶段和应用程序一同运行)；G1中采用了比CMS更快的初始快照算法:snapshot-at-the-beginning (SATB)。")])]),a._v(" "),r("li",[r("p",[a._v("Copy/Clean up，多线程清除失活对象，会有STW。G1将回收区域的存活对象拷贝到新区域，清除Remember Sets，并发清空回收区域并把它返回到空闲区域链表中。")])]),a._v(" "),r("li",[r("p",[a._v("复制/清除过程后。回收区域的活性对象已经被集中回收到深蓝色和深绿色区域。")])])]),a._v(" "),r("h2",{attrs:{id:"常用的收集器组合"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#常用的收集器组合","aria-hidden":"true"}},[a._v("#")]),a._v(" 常用的收集器组合")]),a._v(" "),r("table",[r("thead",[r("tr",[r("th",[a._v("组合")]),a._v(" "),r("th",[a._v("新生代GC策略")]),a._v(" "),r("th",[a._v("年老代GC策略")]),a._v(" "),r("th",[a._v("说明")])])]),a._v(" "),r("tbody",[r("tr",[r("td",[a._v("1")]),a._v(" "),r("td",[a._v("Serial")]),a._v(" "),r("td",[a._v("Serial Old")]),a._v(" "),r("td",[a._v("Serial和Serial Old都是单线程进行GC，特点就是GC时暂停所有应用线程")])]),a._v(" "),r("tr",[r("td",[a._v("2")]),a._v(" "),r("td",[a._v("Serial")]),a._v(" "),r("td",[a._v("CMS+Serial Old")]),a._v(" "),r("td",[a._v("CMS（Concurrent Mark Sweep）是并发GC，实现GC线程和应用线程并发工作，不需要暂停所有应用线程。另外，当CMS进行GC失败时，会自动使用Serial Old策略进行GC。")])]),a._v(" "),r("tr",[r("td",[a._v("3")]),a._v(" "),r("td",[a._v("ParNew")]),a._v(" "),r("td",[a._v("CMS")]),a._v(" "),r("td",[a._v("使用-XX:+UseParNewGC选项来开启。ParNew是Serial的并行版本，可以指定GC线程数，默认GC线程数为CPU的数量。可以使用-XX:ParallelGCThreads选项指定GC的线程数。")])]),a._v(" "),r("tr",[r("td",[a._v("如果指定了选项-XX:+UseConcMarkSweepGC选项，则新生代默认使用ParNew GC策略")]),a._v(" "),r("td"),a._v(" "),r("td"),a._v(" "),r("td")]),a._v(" "),r("tr",[r("td",[a._v("4")]),a._v(" "),r("td",[a._v("ParNew")]),a._v(" "),r("td",[a._v("Serial Old")]),a._v(" "),r("td",[a._v("使用-XX:+UseParNewGC选项来开启。新生代使用ParNew GC策略，年老代默认使用Serial Old GC策略。")])]),a._v(" "),r("tr",[r("td",[a._v("5")]),a._v(" "),r("td",[a._v("Parallel Scavenge")]),a._v(" "),r("td",[a._v("Serial Old")]),a._v(" "),r("td",[a._v("Parallel Scavenge策略主要是关注一个可控的吞吐量：应用程序运行时间 / (应用程序运行时间 + GC时间)，可见这会使得CPU的利用率尽可能的高，适用于后台持久运行的应用程序，而不适用于交互较多的应用程序.")])]),a._v(" "),r("tr",[r("td",[a._v("6")]),a._v(" "),r("td",[a._v("Parallel Scavenge")]),a._v(" "),r("td",[a._v("Parallel Old")]),a._v(" "),r("td",[a._v("Parallel Old是Serial Old的并行版本")])]),a._v(" "),r("tr",[r("td",[a._v("7")]),a._v(" "),r("td",[a._v("G1")]),a._v(" "),r("td",[a._v("G1")]),a._v(" "),r("td",[a._v("-XX:+UnlockExperimentalVMOptions -XX:+UseG1GC   #开启 -XX:MaxGCPauseMillis =50   #暂停时间目标 -XX:GCPauseIntervalMillis =200  #暂停间隔目标 -XX:+G1YoungGenSize=512m    #年轻代大小  -XX:SurvivorRatio=6    #幸存区比例")])])])]),a._v(" "),r("h2",{attrs:{id:"参考资料"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#参考资料","aria-hidden":"true"}},[a._v("#")]),a._v(" 参考资料")]),a._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"http://my.oschina.net/hosee/blog/644618",target:"_blank",rel:"noopener noreferrer"}},[a._v("\bHosee的博客"),r("OutboundLink")],1)]),a._v(" "),r("li",[a._v("深入理解Java虚拟机")])])])},[],!1,null,null,null);l.options.__file="gc_collectors.md";e.default=l.exports}}]);