(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{210:function(e,t,s){"use strict";s.r(t);var r={props:["slot-key"],mounted:function(){this.$nextTick(function(){this.$vuepress.$emit("AsyncMarkdownContentMounted",this.slotKey)})}},a=s(5),n=Object(a.a)(r,function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.slotKey}},[s("h1",{attrs:{id:"spring-中的常用注解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring-中的常用注解","aria-hidden":"true"}},[e._v("#")]),e._v(" Spring 中的常用注解")]),e._v(" "),s("h2",{attrs:{id:"resource"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#resource","aria-hidden":"true"}},[e._v("#")]),e._v(" @resource")]),e._v(" "),s("p",[e._v("如果同时指定了 name 和 type，则从 Spring 上下文中找到唯一匹配的 bean 进行装配，找不到则抛出异常\n如果指定了 name，则从上下文中查找名称（id）匹配的 bean 进行装配，找不到则抛出异常\n如果指定了 type，则从上下文中找到类型匹配的唯一 bean 进行装配，找不到或者找到多个，都会抛出异常\n如果既没有指定 name，又没有指定 type，则自动按照 byName 方式进行装配；如果没有匹配，则回退为一个原始类型进行匹配，如果匹配则自动装配；")]),e._v(" "),s("h2",{attrs:{id:"postconstruct"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#postconstruct","aria-hidden":"true"}},[e._v("#")]),e._v(" @postConstruct")]),e._v(" "),s("p",[e._v("用来标记是在项目启动的时候执行这个方法。用来修饰一个非静态的 void()方法\n也就是 spring 容器启动时就执行，多用于一些全局配置、数据字典之类的加载\n被@PostConstruct 修饰的方法会在服务器加载 Servlet 的时候运行，并且只会被服务器执行一次。PostConstruct 在构造函数之后执行,init()方法之前执行。PreDestroy（）方法在 destroy()方法执行执行之后执")]),e._v(" "),s("h2",{attrs:{id:"predestory"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#predestory","aria-hidden":"true"}},[e._v("#")]),e._v(" @preDestory")]),e._v(" "),s("p",[e._v("被@PreDestroy 修饰的方法会在服务器卸载 Servlet 的时候运行，并且只会被服务器调用一次，类似于 Servlet 的 destroy()方法。被@PreDestroy 修饰的方法会在 destroy()方法之后运行，在 Servlet 被彻底卸载之前")]),e._v(" "),s("h2",{attrs:{id:"scope"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#scope","aria-hidden":"true"}},[e._v("#")]),e._v(" @scope")]),e._v(" "),s("ul",[s("li",[e._v("singleton:单例模式,全局有且仅有一个实例")]),e._v(" "),s("li",[e._v("prototype:原型模式,每次获取 Bean 的时候会有一个新的实例")]),e._v(" "),s("li",[e._v("request:request 表示该针对每一次 HTTP 请求都会产生一个新的 bean，同时该 bean 仅在当前 HTTP request 内有效")]),e._v(" "),s("li",[e._v("session:session 作用域表示该针对每一次 HTTP 请求都会产生一个新的 bean，同时该 bean 仅在当前 HTTP session 内有效")]),e._v(" "),s("li",[e._v("global session:只在 portal 应用中有用，给每一个 global http session 新建一个 Bean 实例。")])]),e._v(" "),s("h2",{attrs:{id:"sessionattributes"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sessionattributes","aria-hidden":"true"}},[e._v("#")]),e._v(" @SessionAttributes")]),e._v(" "),s("p",[e._v("注解就可以使得模型中的数据存储一份到 session 域中")]),e._v(" "),s("ul",[s("li",[e._v("names：这是一个字符串数组。里面应写需要存储到 session 中数据的名称。")]),e._v(" "),s("li",[e._v("types：根据指定参数的类型，将模型中对应类型的参数存储到 session 中")]),e._v(" "),s("li",[e._v("value：和 names 是一样的。")])]),e._v(" "),s("h2",{attrs:{id:"controller"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#controller","aria-hidden":"true"}},[e._v("#")]),e._v(" @Controller")]),e._v(" "),s("p",[e._v('@SessionAttributes(value={"names"},types={Integer.class})\npublic class ScopeService {\n        @RequestMapping("/testSession")\n        public String test(Map<String,Object> map){\n            map.put("names", Arrays.asList("a","b","c"));\n            map.put("age", 12);\n            return "hello";\n       }\n}')]),e._v(" "),s("h2",{attrs:{id:"qualifer"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#qualifer","aria-hidden":"true"}},[e._v("#")]),e._v(" @qualifer")]),e._v(" "),s("p",[e._v("当你创建多个具有相同类型的 bean 时，并且想要用一个属性只为它们其中的一个进行装配，在这种情况下，你可以使用 @Qualifier 注释和 @Autowired 注释通过指定哪一个真正的 bean 将会被装配来消除混乱")]),e._v(" "),s("h2",{attrs:{id:"configurationproperties"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#configurationproperties","aria-hidden":"true"}},[e._v("#")]),e._v(" @ConfigurationProperties")]),e._v(" "),s("p",[e._v("更加优雅的获取配置文件中的值")]),e._v(" "),s("h2",{attrs:{id:"component"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#component","aria-hidden":"true"}},[e._v("#")]),e._v(" @Component")]),e._v(" "),s("p",[e._v('// 还可以通过@PropertySource("classpath:jdbc.properties")来指定配置文件\n@ConfigurationProperties("jdbc.mysql")\n// 前缀=jdbc.mysql，会在配置文件中寻找 jdbc.mysql.*的配置项\npulic class JdbcConfig {\npublic String url;\npublic String username;\npublic String password;\n}')])])},[],!1,null,null,null);n.options.__file="spring_anonation.md";t.default=n.exports}}]);